{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"path\"","webpack:///external \"webpack\"","webpack:///./webpack/common.js","webpack:///external \"webpack-merge\"","webpack:///external \"fs\"","webpack:///./src/server/certs/key.pem","webpack:///./src/server/certs/cert.pem","webpack:///external \"./assets/app.server.js\"","webpack:///external \"./assets/stats.json\"","webpack:///external \"webpack-hot-server-middleware\"","webpack:///external \"webpack-hot-middleware\"","webpack:///external \"webpack-dev-middleware\"","webpack:///./scripts/node-externals.js","webpack:///./webpack/server.js","webpack:///external \"serviceworker-webpack-plugin\"","webpack:///external \"webpack-pwa-manifest\"","webpack:///./webpack/client.js","webpack:///external \"dotenv\"","webpack:///external \"shrink-ray\"","webpack:///external \"helmet\"","webpack:///external \"winston\"","webpack:///external \"spdy\"","webpack:///external \"express\"","webpack:///./src/index.js","webpack:///external \"babel-polyfill\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","require","join","output","path","__dirname","publicPath","resolve","extensions","rules","test","use","loader","options","readdirSync","filter","x","reduce","externals","mod","merge","webpack","common","nodeExternals","mode","target","entry","devtool","filename","libraryTarget","stats","performance","plugins","optimize","LimitChunkCountPlugin","maxChunks","WebpackPwaManifest","ServiceWorkerPlugin","chunkFilename","DefinePlugin","CACHE_NAME","JSON","stringify","Date","HotModuleReplacementPlugin","NamedModulesPlugin","short_name","description","theme_color","background_color","start_url","display","icons","src","sizes","fingerprints","inject","excludes","_fs","_path","_winston","default","config","app","_express2","_helmet2","_shrinkRay2","log","clientStats","serverRender","outputPath","static","configureProduction","set","process","env","PORT","isDevelopment","certFile","keyFile","cert","readFileSync","key","getCertificate","_spdy2","createServer","listen"],"mappings":"aACA,IAAAA,KAMA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,IAGA3B,EAAA4B,KAIA5B,IAAA6B,EAAA,oBCzEA1B,EAAAD,QAAA4B,QAAA,uBCAA3B,EAAAD,QAAA4B,QAAA,6CCAQC,EAAS/B,EAAQ,GAAjB+B,KAER5B,EAAOD,SACH8B,QACIC,KAAMF,EAAKG,UAAW,oBACtBC,WAAY,KAEhBC,SACIC,YAAa,OACb/B,SACIyB,EAAKG,UAAW,mBAChBH,EAAKG,UAAW,YAGxB/B,QACImC,QACIC,KAAM,QACNC,IAAK,iBAELD,KAAM,qCACNC,KACIC,OAAQ,cACRC,SACI/B,KAAM,0BAId4B,KAAM,6BACNC,KACIC,OAAQ,cACRC,SACI/B,KAAM,yBAId4B,KAAM,SACNC,KACIC,OAAQ,cACRC,SACI/B,KAAM,qBACNwB,WAAYJ,EAAKG,UAAW,iBAIpCK,KAAM,SACNC,KACI,eACA,iCC/ChBrC,EAAAD,QAAA4B,QAAA,gCCAA3B,EAAAD,QAAA4B,QAAA,qBCAA3B,EAAAD,QAAA,4ECAAC,EAAAD,QAAA,6ECAAC,EAAAD,QAAA4B,QAAA,yCCAA3B,EAAAD,QAAA4B,QAAA,sCCAA3B,EAAAD,QAAA4B,QAAA,gDCAA3B,EAAAD,QAAA4B,QAAA,yCCAA3B,EAAAD,QAAA4B,QAAA,wDCAA,IAAMa,EAAc3C,EAAQ,GAAM2C,YAC5BZ,EAAO/B,EAAQ,GAAQ+B,KAE7B5B,EAAOD,QAAUyC,EAAYZ,EAAKG,UAAW,oBACxCU,OAAO,SAAAC,GAAA,OAAM,gFAAgFN,KAAKM,KAClGC,OAAO,SAACC,EAAWC,GAEhB,OADAD,EAAUC,GAAV,YAA6BA,EACtBD,qCCPf,IAAME,EAAQjD,EAAQ,GAChBkD,EAAUlD,EAAQ,GAClBmD,EAASnD,EAAQ,GACf+B,EAAS/B,EAAQ,GAAjB+B,KACFqB,EAAgBpD,EAAQ,IAE9BG,EAAOD,QAAU+C,EAAME,GACnBE,KAAM,cACN1C,KAAM,SACN2C,OAAQ,OACRP,UAAWK,EACXG,OACIxB,EAAKG,UAAW,wBAEpBsB,QAAS,oBACTxB,QACIyB,SAAU,gBACVC,cAAe,aAEnBC,OACIC,aAAa,GAEjBC,SACI,IAAIX,EAAQY,SAASC,uBACjBC,UAAW,sBCxBvB7D,EAAAD,QAAA4B,QAAA,+CCAA3B,EAAAD,QAAA4B,QAAA,sDCAA,IAAMoB,EAAUlD,EAAQ,GAClBiD,EAAQjD,EAAQ,GAChBmD,EAASnD,EAAQ,KACGA,EAAQ,GAA1B+B,SAAMK,YACR6B,EAAqBjE,EAAQ,IAC7BkE,EAAsBlE,EAAQ,IAEpCG,EAAOD,QAAU+C,EAAME,GACnBE,KAAM,cACN1C,KAAM,SACN2C,OAAQ,MACRC,OACI,gCACAxB,EAAKG,UAAW,wBAEpBsB,QAAS,oBACTxB,QACIyB,SAAU,gBACVU,cAAe,mBAEnBN,SACI,IAAIX,EAAQkB,cACRC,WAAYC,KAAKC,UAAL,gBAA8B,IAAIC,QAElD,IAAItB,EAAQuB,2BACZ,IAAIvB,EAAQwB,mBACZ,IAAIT,GACAtD,KAAM,SACNgE,WAAY,SACZC,YAAa,kCACbC,YAAa,UACbC,iBAAkB,UAClBC,UAAW,wBACXC,QAAS,aACTC,QACIC,IAAK9C,EAAQF,UAAW,gDACxBiD,OAAQ,OAERD,IAAK9C,EAAQF,UAAW,gDACxBiD,OAAQ,OAEZ1B,SAAU,kBACV2B,cAAc,EACdC,QAAQ,IAEZ,IAAInB,GACAX,MAAOxB,EAAKG,UAAW,uBACvBoD,UACI,QACA,WACA,4CClDhBnF,EAAAD,QAAA4B,QAAA,yBCAA3B,EAAAD,QAAA4B,QAAA,6BCAA3B,EAAAD,QAAA4B,QAAA,yBCAA3B,EAAAD,QAAA4B,QAAA,0BCAA3B,EAAAD,QAAA4B,QAAA,uBCAA3B,EAAAD,QAAA4B,QAAA,yCCAA,QAAA9B,EAAA,SACAA,EAAA,KACAuF,EAAAvF,EAAA,GACAwF,EAAAxF,EAAA,GACAyF,EAAAzF,EAAA,QACAA,EAAA,SACAA,EAAA,0DACAA,EAAA,KAEA0F,QAAOC,SAQP,IA0DMC,GAAM,EAAAC,EAAAH,WAIZE,EAAIpD,KAAI,EAAAsD,EAAAJ,YACRE,EAAIpD,KAAI,EAAAuD,EAAAL,UACJ9C,OAAQ,kBAAM,OAGlB,EAAA6C,EAAAO,KAAI,OAAJ,qDAvC4B,SAAAJ,GACxB,IAAMK,EAAcjG,EAAQ,GACtBkG,EAAelG,EAAQ,GAA0B0F,QAEjDS,GAAa,EAAAX,EAAAzD,MAAKG,UAAW,UAEnC0D,EAAIpD,IAHe,IAGCqD,EAAAH,QAAQU,OAAOD,IACnCP,EAAIpD,IACA0D,GACID,cACAE,gBAiCRE,CAAoBT,IAGxB,EAAAH,EAAAO,KAAI,OAAQ,6BACZJ,EAAIU,IAAI,OAAQC,QAAQC,IAAIC,MAAQ,WAhCb,SAAAC,GACnB,IAAMC,EAAWD,GACX,EAAAlB,EAAAzD,MAAKG,UAAW,yBAChBlC,EAAQ,GAER4G,EAAUF,GACV,EAAAlB,EAAAzD,MAAKG,UAAW,wBAChBlC,EAAQ,GAEd,OACI6G,MAAM,EAAAtB,EAAAuB,cAAaH,GACnBI,KAAK,EAAAxB,EAAAuB,cAAaF,IAuBJI,EAjBA,GAiBdH,SAAME,QAEAE,EAAAvB,QAAKwB,cACfH,MACAF,QACDjB,GAEGuB,OAAOvB,EAAI1E,IAAI,QAAS,kBAC1B,EAAAuE,EAAAO,KAAI,OAAJ,mCAA+CJ,EAAI1E,IAAI,QAAvD,wBCtGJf,EAAAD,QAAA4B,QAAA","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","module.exports = require(\"path\");","module.exports = require(\"webpack\");","const { join } = require('path');\n\nmodule.exports = {\n    output: {\n        path: join(__dirname, '../public/assets'),\n        publicPath: '/'\n    },\n    resolve: {\n        extensions: ['.js'],\n        modules: [\n            join(__dirname, '../node_modules'),\n            join(__dirname, '../src')\n        ]\n    },\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            use: 'babel-loader'\n        }, {\n            test: /\\.(png|jpg|jpeg|svg|gif|ico|webp)$/,\n            use: {\n                loader: 'file-loader',\n                options: {\n                    name: 'images/[name].[ext]'\n                }\n            }\n        }, {\n            test: /\\.(woff|woff2|ttf|eot|otf)/,\n            use: {\n                loader: 'file-loader',\n                options: {\n                    name: 'fonts/[name].[ext]'\n                }\n            }\n        }, {\n            test: /\\.pem$/,\n            use: {\n                loader: 'file-loader',\n                options: {\n                    name: 'certs/[name].[ext]',\n                    publicPath: join(__dirname, '../public')\n                }\n            }\n        }, {\n            test: /\\.css$/,\n            use: [\n                'style-loader',\n                'css-loader'\n            ]\n        }]\n    }\n};\n","module.exports = require(\"webpack-merge\");","module.exports = require(\"fs\");","module.exports = \"M:\\\\Projects\\\\Github\\\\real-world-pwa\\\\public/certs/key.pem\";","module.exports = \"M:\\\\Projects\\\\Github\\\\real-world-pwa\\\\public/certs/cert.pem\";","module.exports = require(\"./assets/app.server.js\");","module.exports = require(\"./assets/stats.json\");","module.exports = require(\"webpack-hot-server-middleware\");","module.exports = require(\"webpack-hot-middleware\");","module.exports = require(\"webpack-dev-middleware\");","const readdirSync = require('fs').readdirSync;\nconst join = require('path').join;\n\nmodule.exports = readdirSync(join(__dirname, '../node_modules'))\n    .filter(x => !/\\.bin|react-universal-component|require-universal-module|webpack-flush-chunks/.test(x))\n    .reduce((externals, mod) => {\n        externals[mod] = `commonjs ${mod}`;\n        return externals;\n    }, {});\n","const merge = require('webpack-merge');\nconst webpack = require('webpack');\nconst common = require('./common');\nconst { join } = require('path');\nconst nodeExternals = require('../scripts/node-externals');\n\nmodule.exports = merge(common, {\n    mode: 'development',\n    name: 'server',\n    target: 'node',\n    externals: nodeExternals,\n    entry: [\n        join(__dirname, '../src/server/index')\n    ],\n    devtool: 'inline-source-map',\n    output: {\n        filename: 'app.server.js',\n        libraryTarget: 'commonjs2'\n    },\n    stats: {\n        performance: false\n    },\n    plugins: [\n        new webpack.optimize.LimitChunkCountPlugin({\n            maxChunks: 1\n        })\n    ]\n});\n","module.exports = require(\"serviceworker-webpack-plugin\");","module.exports = require(\"webpack-pwa-manifest\");","const webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst common = require('./common');\nconst { join, resolve } = require('path');\nconst WebpackPwaManifest = require('webpack-pwa-manifest');\nconst ServiceWorkerPlugin = require('serviceworker-webpack-plugin');\n\nmodule.exports = merge(common, {\n    mode: 'development',\n    name: 'client',\n    target: 'web',\n    entry: [\n        'webpack-hot-middleware/client',\n        join(__dirname, '../src/client/index')\n    ],\n    devtool: 'inline-source-map',\n    output: {\n        filename: 'app.client.js',\n        chunkFilename: '[name].chunk.js'\n    },\n    plugins: [\n        new webpack.DefinePlugin({\n            CACHE_NAME: JSON.stringify(`pstore-dev-${+new Date()}`)\n        }),\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.NamedModulesPlugin(),\n        new WebpackPwaManifest({\n            name: 'PStore',\n            short_name: 'PStore',\n            description: 'A Progressive WebApp Demo Store',\n            theme_color: '#2c3e50',\n            background_color: '#2c3e50',\n            start_url: 'http://localhost:3000',\n            display: 'standalone',\n            icons: [{\n                src: resolve(__dirname, '../src/assets/pwa/android-chrome-192x192.png'),\n                sizes: [192]\n            }, {\n                src: resolve(__dirname, '../src/assets/pwa/android-chrome-512x512.png'),\n                sizes: [512]\n            }],\n            filename: 'app.webmanifest',\n            fingerprints: false,\n            inject: false\n        }),\n        new ServiceWorkerPlugin({\n            entry: join(__dirname, '../src/client/sw.js'),\n            excludes: [\n                '**/.*',\n                '**/*.map',\n                '**/*.hot-update.json'\n            ]\n        })\n    ]\n});\n","module.exports = require(\"dotenv\");","module.exports = require(\"shrink-ray\");","module.exports = require(\"helmet\");","module.exports = require(\"winston\");","module.exports = require(\"spdy\");","module.exports = require(\"express\");","import express from 'express';\nimport spdy from 'spdy';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\nimport { log } from 'winston';\nimport helmet from 'helmet';\nimport shrinkRay from 'shrink-ray';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\n/**\n * Configures hot reloading and assets paths for local development environment.\n * Use the `npm start` command to start the local development server.\n *\n * @param app Express app\n */\nconst configureDevelopment = app => {\n    const clientConfig = require('../webpack/client');\n    const serverConfig = require('../webpack/server');\n    const publicPath = clientConfig.output.publicPath;\n    const outputPath = clientConfig.output.path;\n\n    const multiCompiler = require('webpack')([clientConfig, serverConfig]);\n    const clientCompiler = multiCompiler.compilers[0];\n\n    app.use(require('webpack-dev-middleware')(multiCompiler, { publicPath }));\n    app.use(require('webpack-hot-middleware')(clientCompiler));\n\n    app.use(publicPath, express.static(outputPath));\n\n    app.use(\n        require('webpack-hot-server-middleware')(multiCompiler, {\n            serverRendererOptions: { outputPath }\n        })\n    );\n};\n\n/**\n * Configures assets paths for production environment.\n * This environment is used in deployment and inside the docker container.\n * Use the `npm run build` command to create a production build.\n *\n * @param app Express app\n */\nconst configureProduction = app => {\n    const clientStats = require('./assets/stats.json');\n    const serverRender = require('./assets/app.server.js').default;\n    const publicPath = '/';\n    const outputPath = join(__dirname, 'assets');\n\n    app.use(publicPath, express.static(outputPath));\n    app.use(\n        serverRender({\n            clientStats,\n            outputPath\n        })\n    );\n};\n\nconst getCertificate = isDevelopment => {\n    const certFile = isDevelopment\n        ? join(__dirname, 'server/certs/cert.pem')\n        : require('./server/certs/cert.pem');\n\n    const keyFile = isDevelopment\n        ? join(__dirname, 'server/certs/key.pem')\n        : require('./server/certs/key.pem');\n\n    return {\n        cert: readFileSync(certFile),\n        key: readFileSync(keyFile)\n    };\n};\n\nconst app = express();\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\napp.use(helmet());\napp.use(shrinkRay({\n    filter: () => !isDevelopment\n}));\n\nlog('info', `Configuring server for environment: ${process.env.NODE_ENV}...`);\nif (isDevelopment) {\n    configureDevelopment(app);\n} else {\n    configureProduction(app);\n}\n\nlog('info', 'Spawning secure server...');\napp.set('port', process.env.PORT || 3000);\n\nconst { cert, key } = getCertificate(isDevelopment);\n\nconst http2 = spdy.createServer({\n    key,\n    cert\n}, app);\n\nhttp2.listen(app.get('port'), () =>\n    log('info', `Secure server listening on port ${app.get('port')}...`)\n);\n","module.exports = require(\"babel-polyfill\");"],"sourceRoot":""}